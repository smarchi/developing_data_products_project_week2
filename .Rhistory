training <- buildData[inTrain,]
testing <- buildData[-inTrain,]
dim(training)
mod1 <- train(wage~., method='glm', data = training)
mod2 <- train(wage~. methis = 'rf', data = training, trControl = trainControl(method = "cv"), number = 3)
mod2 <- train(wage~., method = 'rf', data = training, trControl = trainControl(method = "cv"), number = 3)
pred1 <- predict(mod1, data = training)
pred2 <- predict(mod2, data = training)
qplot(pred1,pred2, color = wage, data = training)
pred1 <- predict(mod1, data = testing)
pred2 <- predict(mod2, data = testing)
qplot(pred1,pred2, color = wage, data = testing)
str(testing)
qplot(pred1,pred2, colour = wage, data = testing)
mod2
mod1
pred2 <- predict(mod2, data = testing)
pred1 <- predict(mod1, data = testing)
qplot(pred1,pred2, colour = wage, data = testing)
pred1
dim(pred1)
class(pred1)
pred1[1]
testing <- buildData[-inTrain,]
pred1 <- predict(mod1, data = testing)
pred2 <- predict(mod2, data = testing)
qplot(pred1,pred2, colour = wage, data = testing)
class(pred1[1])
pred1[1][1]
pred1[1][2]
str(testing)
esting$wage
testing$wage
pred2 <- predict(mod2, testing)
pred1 <- predict(mod1, testing)
qplot(pred1,pred2, colour = wage, data = testing)
packageVersion("AppliedPredictiveModeling")
packageVersion("gbm")
install.packages(gbm)
install.packages("gbm")
install.packages("forecast")
install.packages("lmtest")
install.packages("lmtest")
install.packages("forecast")
install.packages("e1071")
library(ElemStatLearn)
data("vowel.train")
data("vowel.test")
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
mod_rf <- train(y ~., data = vowel.train, method = 'rf')
mod_boost <- train(y ~., data = vowel.train, method = 'gbm')
mod_boost <- train(y ~., data = vowel.train, method = 'gbm', verbose = F)
mod_rf
str(vowel.train)
library(rattle)
install.packages("rattle")
library(rattle)
mod_rf$finalModel
predict(mod_rf, vowel.test)
mod_rf <- train(y ~., data = vowel.train, method = 'rf', prox=T)
table(predict(mod_rf, vowel.test), vowel.test$y)
help(acf)
mod_rf
table(predict(mod_rf, vowel.train), vowel.train$y)
table(predict(mod_rf, vowel.train$y), vowel.train$y)
table(predict(mod_rf, vowel.train), vowel.train$y)
mod_rf <- train(y ~., data = vowel.train, method = 'rf', prox=T)
table(predict(mod_rf, vowel.train), vowel.train$y)
table(predict(mod_rf, vowel.test), vowel.test$y)
(30+27+30+29+18+24+27+29+22+20+17)/legth(vowel.test$y)
(30+27+30+29+18+24+27+29+22+20+17)/length(vowel.test$y)
t <- table(predict(mod_rf, vowel.test), vowel.test$y)
t
diag(t)
sum(diag(t))
sum(diag(t))/sum(t)
sum(diag(t))/(11*11)
sum(diag(t))/sum(t)
mod_gbm
mod_boost
t2 <- table(predict(mod_boost, vowel.test), vowel.test$y)
t2
sum(diag(t2))/sum(t2)
t1
t
t3 <- table(predict(mod_rf, vowel.test), predict(mod_boost, vowel.test))
t3
sum(diag(t3))/sum(t3)
pred_rf <- predict(mod_rf, vowel.test$y)
pred_rf <- predict(mod_rf, vowel.test)
pred_boost <- predict(mod_boost, vowel.test)
confusionMatrix(pred_rf, vowel.test$y)
confusionMatrix(pred_rf, vowel.test$y)$overall
confusionMatrix(pred_rf, vowel.test$y)
confusionMatrix(pred_boost, vowel.test$y)
agree <- (pred_rf == pred_boost)
confusionMatrix(pred_boost[agree], volwel.test$y[agree])
confusionMatrix(pred_boost[agree], vowel.test$y[agree])
confusionMatrix(vowel.test$y[agree], pred_boost[agree])
library(gbm)
set.seed/3433
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[inTrain, ]
testing <- adData[-inTrain, ]
set.seed(62433)
rf <- train(diagnosis ~., data = training, method = 'rf', prox=T)
boost <- train(diagnosis ~., data = training, method = 'gbm', verbose = F)
lda <- train(diagnosis ~., data = training, method = 'lda')
pred_rf <- predict(rf, testing)
pred_boost <- predict(boost, testing)
pred_lda <- predict(lda, testing)
pred_data <- data.frame(rf = pred_rf, boost = pred_boost, lda = pred_lda, diagnosis = testing$diagnosis)
pred_data
comb <- train(diagnosis ~., data = pred_data, method = 'rf', prox=T)
pred_comb <- predict(comb, testing)
pred_comb <- predict(comb, pred_comb)
pred_comb <- predict(comb, comb)
pred_comb <- predict(comb, pred_data)
confusionMatrix(pred_comb, testing$diagnosis)
confusionMatrix(pred_rf, testing$diagnosis)
confusionMatrix(pred_boost, testing$diagnosis)
confusionMatrix(pred_lda, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
help(lasso)
library(lasso)
install.packages("lasso")
??lasso
library("e1071")
help(lasso)
lasso
library(caret)
lasso
lasso()
help(lasso)
help("train")
names(getModelInfo())
lasso <- train(CompressiveStrength ~. , data = training, method = 'lasso')
lasso <- train(CompressiveStrength ~. , data = training, method = 'lasso')
lasso
?plot.enet
class(lasso)
plot.enet(lasso)
plot(lasso)
str(training)
?plot.enet
plot(lasso, xvar = "L1norm")
plot(lasso, xvar = c("fraction", "penalty", "L1norm", "step"))
plot(lasso)
plot(lasso, xvar = L1nomr)
plot(lasso, xvar = L1norm)
plot(lasso, xvar = 'step')
plot(lasso, xvar = "step")
plot(lasso, xvar = "penalty")
lasso
lasso$finalModel
plot.enet(lasso$finalModel, xvars = "penalty")
plot(lasso$finalModel, xvars = "penalty")
plot.enet(lasso$finalModel)
install.packages("elasticnet")
install.packages("elasticnet")
plot.enet
plot.enet()
enet
help(plot.enet)
lasso$finalModel
plot.enet(lasso$finalModel)
library(elasticnet)
plot.enet(lasso$finalModel)
plot.enet(lasso$finalModel, xvar = "step")
plot.enet(lasso$finalModel, xvar = "penalyze")
plot.enet(lasso$finalModel, xvar = "L1norm")
plot.enet(lasso$finalModel, xvar = "fraction")
plot.enet(lasso$finalModel, xvar = "penalty")
cor(training$Cement, training$CompressiveStrength)
cor(training$Water, training$CompressiveStrength)
cor(training$FlyAsh, training$CompressiveStrength)
help(pca)
help("prcomp")
prcomp(training, scale=TRUE)
prcomp(CompressiveStrength ~., training, scale=TRUE)
p <- train(CompressiveStrength ~. , data = training, method = "pca")
train(CompressiveStrength ~. , data = training, method = "lm")
p <- train(CompressiveStrength ~. , data = training, method = "lm")
summary(p)
library(lubridate)
dat = read.csv("~/Downloads/gaData.csv")
str(dat)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstrain
str(dat)
class(tstrain)
library(forecast)
help(bats)
plot(ts)
plot(tstrain)
str(tstrain)
summary(tstrain)
head(dat)
head(dat, 20)
head(dat, 100)
dat[330,]
dat[340,]
dat[350,]
dat[320,]
dat[310,]
max(dat$visitsTumblr)
mod <- bats(tstrain)
mod
summary(mod)
mod$y
mod$x
mod$º
mod$seasonal.periods
plot(mod)
plot(mod$lambda)
plot(mod$fitted.values)
plot(mod$damping.parameter)
plot(mod$gamma.values)
plot(mod$likelihood)
plot(mod$errors)
pred_bats <- predict(mod, testing)
class(mod)
plot(forecast(mod))
plot(forecast(mod))
lines(training, col = "red")
plot(forecast(mod))
lines(testing, col = "red")
accuracy(mod, testing)
accuracy(forecast(mod), testing)
forecast(mod)
accuracy(forecast(mod), testing)
fcast <- forecast(mod)
fcast
accuracy(fcast, testing)
fcast
testing
testing$visitsTumblr
accuracy(fcast, testing$visitsTumblr)
class(testing)
tstest <- ts(testing$visitsTumblr)
tstest
accuracy(fcast, tstest)
testing
training
View(training)
forecast(mod)
forecast(mod)
tstrain
tsting
testing
testing2 <- testing[1,]
testing2
ts.intersect(fcast,testing)
testing2 <- testing[10,]
testing2
testing2 <- testing[0:10,]
testing2
fcast
class(fcast)
fcast$series
fcast$x
fcast$upper
fcast$upper[,1]
fcast$upper[,2]
inside <- (testing2$visitsTumblr < fcast$upper[,2]) & (testing2$visitsTumblr > fcast$lower[,2])
inisde
inside
mod <- bats(tstrain)
tstrain
help("forecast")
fcast = forecast(mod, level = 95, h = dim(testing))
testing
dim(testingç)
dim(testing)
fcast = forecast(mod, level = 95, h = dim(testing)[1])
fcast
plot(fcast)
lines(testing$visitsTumblr)
lines(tstest)
plot(fcast)
lines(tstest, color = 'red')
plot(fcast)
plot(fcast)
plot(fcast, testing)
plot(fcast
)
tstest
ts$start
tstest$
start
tstest$start
str(tstest)
tstest <- ts(testing$visitsTumblr, start = 366, end = 366+235)
plot(fcast)
lines(tstest)
lines(tstest, col = 'red')
plot(fcast)
lines(tstest, col = 'red')
inside <- (testing$visitsTumblr < fcast$upper[,2]) & (testing2$visitsTumblr > fcast$lower[,2])
fcast
tstest
inside <- (tstest < fcast$upper) & (tstest > fcast$lower)
inside
sum(inside)/length(inside)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
str(concrete)
library(e1071)
set.seed(325)
help("e1071")
svm()
help("svm")
mod <- svm(CompressiveStrength ~., training)
pred <- predict(mod, testing)
summary(mod)
mod
mod$residuals
pred
sqrt(((pred - testing$CompressiveStrength)**2)/length(pred))
sqrt((sum(pred - testing$CompressiveStrength)**2)/length(pred))
mean((pred - testing$CompressiveStrength)**2)
sqrt(mean((pred - testing$CompressiveStrength)**2))
install.packages('googleVis')
install.packages('plotly')
install.packages('leaflet')
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
install.packages('tidyr')
my_map <- leaflet()
my_map
class(my_map)
setwd("Code/Coursera/data_science_specialization/Developing_data_products/project_week2/")
summit <- read.csv("summits.csv")
summit
str(summit)
summit <- read.csv("summits.csv", stringsAsFactors = False)
summit <- read.csv("summits.csv", stringsAsFactors = FALSE)
str(summit)
summit$Coordenadas
summit$Coordenadas[101]
strsplit(summit$Coordenadas[101], '/')
a <- strsplit(summit$Coordenadas[101], '/')
strsplit(a, ',')
strsplit(a[[1]], ',')
a
strsplit(a[[1]], ',')
a[1]
a[1][1]
a[[1]][2]
strsplit(a[[1]][2], ',')
as.numeric(strsplit(a[[1]][2], ','))
as.numeric(strsplit(a[[1]][2], ',')[[1]])
strsplit(a[[1]][2], ',')
b <- strsplit(a[[1]][2], ',')
ls
b
b[[1]]
as.numeric(b)
as.numeric(b[[|]])
as.numeric(b[[1]])
b
as.numeric(b[[1]][1])
b[[1]][1]
b[[1]][2]
as.numeric(b[[1]][2])
summit$Coordenadas[101]
a
a <- a[[1]]
a
b
b<- b[[1]]
b
trimws(b)
b <- trimws(b)
as.numeric(b)
c <- "-34.800"
class(c)
as.numeric(c)
b
class(b)
b <- as.character(b)
b
as.numeric(b)
str(summit)
b
b[1]
class(b[1])
b[1][2:]
b[1][2]
b[1]
b[2]
b[2][2]
b[1]
substr(b[1], start = 2)
substr(b[1], start = 2, stop = -1)
substr(b[1], start = 2, stop = 25)
substr(b[1], start = 1, stop = 25)
substr(b[2], start = 2, stop = 25)
substr(b[1], start = 3, stop = 25)
summit$Coordenadas[102]
a <- strsplit(summit$Coordenadas[102], '/')
a
b <- a[[1]][2]
b
b <- strsplit(b, ',')
b
b <- b[[1]]
b
b[1]
as.numeric(b[1])
b[1] <- substr(b[1], start = 3, stop = 25)
b
as.numeric(b[1])
summit
summit[summit$Coordenadas != "",]
str(summit)
summit_cut <- summit[summit$Coordenadas != "",]
coord <- strsplit(summit_cut$Coordenadas, "/")[[1]]
coord <- strsplit(coord, ",")[[1]]
coord[1] <- substr(coord[1], start = 3, stop = 100)
coord
summit_cut <- summit[summit$Coordenadas != "",]
coord <- strsplit(summit_cut$Coordenadas, "/")[[1]]
coord
strsplit(summit_cut$Coordenadas, "/")
strsplit(summit_cut$Coordenadas, "/")
sapply(summit_cut$Coordenadas, split("/"))
sapply(summit_cut$Coordenadas, split)
sapply(summit_cut$Coordenadas, strsplit, split = "/")
a <- sapply(summit_cut$Coordenadas, strsplit, split = "/")
class(a)
summit_cut$Coordenadas
a <- sapply(summit_cut$Coordenadas, strsplit, split = "/", simplify = T)
a
class(summit_cut$Coordenadas)
a <- sapply(summit_cut$Coordenadas, strsplit, split = "/", fixed = T)
a
a <- lapply(summit_cut$Coordenadas, strsplit, split = "/")
a
str(summit_cut)
summit_cut$Coordenadas
a <- sapply(summit_cut$Coordenadas, strsplit, split = "/")
a
class(a)
a <- apply(summit_cut$Coordenadas, strsplit, split = "/")
?apply
a <- apply(summit_cut$Coordenadas, 1, strsplit, split = "/")
a <- apply(summit_cut$Coordenadas, 2, strsplit, split = "/")
a <- sapply(summit_cut$Coordenadas, strsplit, split = "/")
a
a <- sapply(summit_cut$Coordenadas, strsplit, split = "/")
a[1]
a[,1]
a[1]
dim(a)
a[1][1]
a[1][1][1]
a[[1]]
a[[2]]
a[[]]
lapply(a, [[]])
lapply(a, [[)
lapply(a, mean)
as.character(a)
a <- sapply(summit_cut$Coordenadas, strsplit, split = "/", fixed = TRUE, '[')
a
a <- sapply(summit_cut$Coordenadas, strsplit, split = "/", fixed = TRUE, '[', 3)
a
a <- sapply(strsplit(summit_cut$Coordenadas, split = "/", fixed = TRUE), '[', 3)
a
a <- sapply(strsplit(summit_cut$Coordenadas, split = "/", fixed = TRUE), '[')
a
a <- sapply(strsplit(summit_cut$Coordenadas, split = "/", fixed = TRUE), '[', 2)
a
coord <- sapply(strsplit(summit_cut$Coordenadas, split = "/", fixed = TRUE), '[', 2)
coord
lat <- sapply(strsplit(coord, split = ",", fixed = TRUE), '[', 1)
lat
sapply(lat, substr, start = 3, stop = 100)
class(sapply(lat, substr, start = 3, stop = 100))
as.numeric(class(sapply(lat, substr, start = 3, stop = 100)))
as.numeric(sapply(lat, substr, start = 3, stop = 100))
coord <- sapply(strsplit(summit_cut$Coordenadas, split = "/", fixed = TRUE), '[', 2)
lat <- sapply(strsplit(coord, split = ",", fixed = TRUE), '[', 1)
long <- sapply(strsplit(coord, split = ",", fixed = TRUE), '[', 2)
lat <- as.numeric(sapply(lat, substr, start = 3, stop = 100))
df <- data.frame(name = summit_cut$Nombre, altitude = summit_cut$Altitud,
latitude = lat, longitude = long)
df
str(summit)
